package com.demo.xclcharts.view;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.xclcharts.chart.AreaChart;
import org.xclcharts.chart.AreaData;
import org.xclcharts.chart.CustomLineData;
import org.xclcharts.common.IFormatterDoubleCallBack;
import org.xclcharts.common.IFormatterTextCallBack;
import org.xclcharts.event.click.PointPosition;
import org.xclcharts.renderer.XEnum;
import org.xclcharts.renderer.info.AnchorDataPoint;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;

public class AreaChart03View extends DemoView  {
	
	private String TAG = "AreaChart03View";
	
	private AreaChart chart = new AreaChart();	
	//标签集合
	private LinkedList<String> mLabels = new LinkedList<String>();
	//数据集合
	private LinkedList<AreaData> mDataset = new LinkedList<AreaData>();
	
	private AreaChart chartBg = new AreaChart();	
	private LinkedList<String> mBgLabels = new LinkedList<String>();
	
	private List<CustomLineData> mCustomLineDataset = new LinkedList<CustomLineData>();

	public AreaChart03View(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		initView();
	}	 
	
	public AreaChart03View(Context context, AttributeSet attrs){   
        super(context, attrs);   
        initView();
	 }
	 
	 public AreaChart03View(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
			initView();
	 }
	 
	 private void initView()
	 {		 		 
		 
		chartLabels();
		chartDataSet();		
		
		chartBgRender();
		chartRender();
		
		//綁定手势滑动事件
		//this.bindTouch(this,chart);
	 }
	
	@Override  
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {  
        super.onSizeChanged(w, h, oldw, oldh);  
       //图所占范围大小
        chartBg.setChartRange(w,h);
        chart.setChartRange(w,h);
        
    }  
			 
	private void chartRender()
	{
		try{												 
				//设置绘图区默认缩进px值,留置空间显示Axis,Axistitle....		
				int [] ltrb = getBarLnDefaultSpadding();
				chart.setPadding(ltrb[0], ltrb[1], ltrb[2], ltrb[3]);
				
				chart.disableHighPrecision();
				chart.disablePanMode();
											
				//轴数据源						
				//标签轴
				chart.setCategories(mLabels);
				//数据轴
				chart.setDataSource(mDataset);
				
				chart.setCrurveLineStyle(XEnum.CrurveLineStyle.BEELINE);
							
				//数据轴最大值
				chart.getDataAxis().setAxisMax(100);
				//数据轴刻度间隔
				chart.getDataAxis().setAxisSteps(10);
				
				//网格
				chart.getPlotGrid().hideHorizontalLines();
				chart.getPlotGrid().hideVerticalLines();
				//把顶轴和右轴隐藏
				//chart.hideTopAxis();
				//chart.hideRightAxis();
				//把轴线和刻度线给隐藏起来
				chart.getDataAxis().hideAxisLine();
				chart.getDataAxis().hideTickMarks();			
				chart.getCategoryAxis().hideAxisLine();
				chart.getCategoryAxis().hideTickMarks();				
				
				
				//标题
				chart.setTitle("区域图(Area Chart)");
				chart.addSubtitle("(XCL-Charts Demo)");	
				//轴标题
				//chart.getAxisTitle().setLowerAxisTitle("(年份)");
				
				//透明度
				chart.setAreaAlpha(200);
				
				/*
				//显示图例
				chart.getPlotLegend().showLegend();
				
				//激活点击监听
				chart.ActiveListenItemClick();
				//为了让触发更灵敏，可以扩大5px的点击监听范围
				chart.extPointClickRange(5);
				*/
			
				
				//设定交叉点标签显示格式
				chart.setItemLabelFormatter(new IFormatterDoubleCallBack() {
					@Override
					public String doubleFormatter(Double value) {
						// TODO Auto-generated method stub
						DecimalFormat df=new DecimalFormat("#0");					 
						String label = df.format(value).toString();
						return label;
					}});
				
				//chart.getBackgroundPaint().setAlpha(254);
				//背景渐变
				//chart.getPlotArea().setBackgroundColor(true, Color.rgb(163, 69, 213));
				//chart.getPlotArea().setApplayGradient(true);
				//chart.getPlotArea().setEndColor(Color.WHITE);
				
				chart.getAreaFillPaint().setAlpha(254);
				chart.setAreaAlpha(254);
				
				chart.getDataAxis().hide();
				chart.getCategoryAxis().hide();
				
				CustomLineData line1 = new CustomLineData("标识线",30d,Color.RED,7);
				line1.setCustomLineCap(XEnum.DotStyle.CROSS);		
				line1.setLabelHorizontalPostion(Align.CENTER);
				//line1.setLabelOffset(15);	
				line1.getLineLabelPaint().setColor(Color.RED);
				line1.setLineStyle(XEnum.LineStyle.SOLID);
				mCustomLineDataset.add(line1);
				chart.setCustomLines(mCustomLineDataset);
			
				//chart.disablePanMode();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Log.e(TAG, e.toString());
		}
	}
	
	private void chartDataSet()
	{
		//将标签与对应的数据集分别绑定
		//标签对应的数据集
		List<Double> dataSeries1= new LinkedList<Double>();	
		
		double testData[] = {10,11,12,56,40,54,46,32,89,76,53,32,66,78,47,33,90,80,60,82} ;  
		for(int i=0;i< testData.length;i++){
			dataSeries1.add( testData[i]);			
			mLabels.add( Integer.toString(i));
		}
				
		//设置每条线各自的显示属性
		//key,数据集,线颜色,区域颜色
		AreaData line1 = new AreaData("小熊",dataSeries1,Color.rgb(108, 180, 223),Color.YELLOW);
		//不显示点
		line1.setDotStyle(XEnum.DotStyle.HIDE);
		
		line1.setApplayGradient(true);
		line1.setAreaBeginColor(Color.WHITE);
		line1.setAreaEndColor(Color.rgb(108, 180, 223));
		line1.setGradientDirection(XEnum.Direction.VERTICAL);
		
		mDataset.add(line1);	
							
	}
	
	private void chartBgRender()
	{
		try{												 
				//设置绘图区默认缩进px值,留置空间显示Axis,Axistitle....		
				int [] ltrb = getBarLnDefaultSpadding();
				chartBg.setPadding(ltrb[0], ltrb[1], ltrb[2], ltrb[3]);
				
				chartBg.disableHighPrecision();
				chartBg.disablePanMode();
				
				//轴数据源						
				//标签轴
				chartBg.setCategories(mBgLabels);
				//数据轴
				//chartBg.setDataSource(mDataset);
				
				chartBg.setCrurveLineStyle(XEnum.CrurveLineStyle.BEELINE);
							
				//数据轴最大值
				chartBg.getDataAxis().setAxisMax(100);
				//数据轴刻度间隔
				chartBg.getDataAxis().setAxisSteps(10);
				
				//网格
				chartBg.getPlotGrid().showHorizontalLines();
				chartBg.getPlotGrid().showVerticalLines();	
				chartBg.getPlotGrid().setHorizontalLineStyle(XEnum.LineStyle.DOT);
				chartBg.getPlotGrid().setVerticalLineStyle(XEnum.LineStyle.DOT);
				
				//把轴线和刻度线给隐藏起来
				chartBg.getDataAxis().hideAxisLine();
				chartBg.getDataAxis().hideTickMarks();			
				chartBg.getCategoryAxis().hideAxisLine();
				chartBg.getCategoryAxis().hideTickMarks();
				
				chartBg.getDataAxis().getTickLabelPaint().setColor(Color.GREEN);
				
				//定义数据轴标签显示格式
				chartBg.getDataAxis().setLabelFormatter(new IFormatterTextCallBack(){
		
					@Override
					public String textFormatter(String value) {
						// TODO Auto-generated method stub		
						Double tmp = Double.parseDouble(value);
						if(Double.compare(tmp, 30d) == -1){
							return "";
						}else{							
							DecimalFormat df=new DecimalFormat("#0");
							String label = df.format(tmp).toString();				
							return (label);
						}
						
					}
					
				});
				
				//chart.disablePanMode();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				Log.e(TAG, e.toString());
			}
		}
		
	
	private void chartLabels()
	{	
		mBgLabels.add("9:00");
		mBgLabels.add("9:30");
		mBgLabels.add("10:00");
		mBgLabels.add("10:30");
		mBgLabels.add("11:00");
	}
	
	@Override
    public void render(Canvas canvas) {
        try{            
            chartBg.render(canvas);
            chart.render(canvas);
        } catch (Exception e){
        	Log.e(TAG, e.toString());
        }
    }


	private void drawTitle()
	{		
		//标题
		chart.setTitle("区域图(Area Chart)");
		chart.addSubtitle("(XCL-Charts Demo)");	
		//轴标题
		chart.getAxisTitle().setLowerTitle("(年份)");
		
		//显示图例
		chart.getPlotLegend().show();
		
		//激活点击监听
		chart.ActiveListenItemClick();
		//为了让触发更灵敏，可以扩大5px的点击监听范围
		chart.extPointClickRange(5);		
		chart.showClikedFocus();		
						
		//批注
		List<AnchorDataPoint> mAnchorSet = new ArrayList<AnchorDataPoint>();
		
		AnchorDataPoint an2 = new AnchorDataPoint(1,3,XEnum.AnchorStyle.CIRCLE);
		an2.setBgColor(Color.GRAY);
		an2.setAnchorStyle(XEnum.AnchorStyle.CIRCLE);
		
		
		AnchorDataPoint an3 = new AnchorDataPoint(1,4,XEnum.AnchorStyle.CIRCLE);
		an3.setBgColor(Color.RED);
		an3.setAnchorStyle(XEnum.AnchorStyle.RECT);
		an3.setAreaStyle(XEnum.DataAreaStyle.STROKE);
		
		//从点到底的标识线
		AnchorDataPoint an4 = new AnchorDataPoint(2,2,XEnum.AnchorStyle.TOBOTTOM);
		an4.setBgColor(Color.YELLOW);
		an4.setLineWidth(15);
		
		AnchorDataPoint an5 = new AnchorDataPoint(2,1,XEnum.AnchorStyle.TORIGHT);
		an5.setBgColor(Color.WHITE);
		an5.setLineWidth(15);
		
		//AnchorDataPoint an6 = new AnchorDataPoint(2,1,XEnum.AnchorStyle.HLINE);
		//an6.setBgColor(Color.WHITE);
		//an6.setLineWidth(15);
	
		mAnchorSet.add(an2);
		mAnchorSet.add(an3);
		mAnchorSet.add(an4);
		mAnchorSet.add(an5);
		//mAnchorSet.add(an6);
		chart.setAnchorDataPoint(mAnchorSet);		
				
				
	}
	
}

